/**
 * @file
 * CKEditor plugin for sloth module.
 */
(function ($, Drupal) {

  "use strict";
console.log('start');
  // $.when(
    Drupal.SlothSpace.collections.viewModes.fetch(),
    Drupal.SlothSpace.collections.pack.fetch()
  //   )
  //   .then(function () {
      console.log(Drupal.SlothSpace.collections.pack);
      console.log(Drupal.SlothSpace.collections.viewModes);
      //Add MT previews to the sloths.
      //Should be a cleaner way to do this.
      $.each(Drupal.SlothSpace.collections.pack.models, function(index, sloth) {
        sloth.set('previews', new Drupal.SlothSpace.collections.Album());
      });
      //Create arrays used later to set <select> options.
      Drupal.SlothSpace.slothOptions = [];
      for(var i = 0; i < Drupal.SlothSpace.collections.pack.length; i++) {
        Drupal.SlothSpace.slothOptions.push([
          Drupal.SlothSpace.collections.pack.models[i].get('title'),
          Drupal.SlothSpace.collections.pack.models[i].get('nid')
        ]);
      }
      Drupal.SlothSpace.viewModeOptions = [];
      for(i = 0; i < Drupal.SlothSpace.collections.viewModes.length; i++) {
        Drupal.SlothSpace.viewModeOptions.push([
          Drupal.SlothSpace.collections.viewModes.models[i].get('label'),
          Drupal.SlothSpace.collections.viewModes.models[i].get('machineName')
        ]);
      }
      console.log('set up arrays');

  CKEDITOR.plugins.add('sloth', {
      requires: 'widget',
      icons: 'sloth',
      init: function (editor) {
        console.log('ck plug init');
        CKEDITOR.dialog.add('sloth', this.path + 'dialogs/sloth.js');
        var initsThis = this;
        //Load sloths and view modes from the server.
        // $.when(
        //     Drupal.SlothSpace.collections.viewModes.fetch(),
        //     Drupal.SlothSpace.collections.pack.fetch()
        //   )
        //   .then(function () {
        //     console.log(Drupal.SlothSpace.collections.pack);
        //     console.log(Drupal.SlothSpace.collections.viewModes);
        //     //Add MT previews to the sloths.
        //     //Should be a cleaner way to do this.
        //     $.each(Drupal.SlothSpace.collections.pack.models, function(index, sloth) {
        //       sloth.set('previews', new Drupal.SlothSpace.collections.Album());
        //     });
        //     //Create arrays used later to set <select> options.
        //     Drupal.SlothSpace.slothOptions = [];
        //     for(var i = 0; i < Drupal.SlothSpace.collections.pack.length; i++) {
        //       Drupal.SlothSpace.slothOptions.push([
        //         Drupal.SlothSpace.collections.pack.models[i].get('title'),
        //         Drupal.SlothSpace.collections.pack.models[i].get('nid')
        //       ]);
        //     }
        //     Drupal.SlothSpace.viewModeOptions = [];
        //     for(i = 0; i < Drupal.SlothSpace.collections.viewModes.length; i++) {
        //       Drupal.SlothSpace.viewModeOptions.push([
        //         Drupal.SlothSpace.collections.viewModes.models[i].get('label'),
        //         Drupal.SlothSpace.collections.viewModes.models[i].get('machineName')
        //       ]);
        //     }
        var path = initsThis.path;
        editor.addContentsCss(path + 'css/sloth.css');
        editor.widgets.add('sloth', {
          path: path,
          button: 'Insert a sloth',
          dialog: 'sloth',
          //Get the HTML template from the editor object.
          // template: editor.config.template,
          //Define the editable pieces of the template.
          editables: {
            content: {
              selector: '.sloth-content'
            }
          },
          //Add to content that ACF will allow.
          allowedContent: 'div(!shard-sloth);'
          + 'div[*](*){*};p(*);',
          extraAllowedContent: '*[*]{*}(*)',
          requiredContent: 'div(shard-sloth);', //[data-shard-type=sloth]',
          upcast: function (element) {
            return element.name == 'div' && element.hasClass('shard-sloth');// element.getAttribute( 'data-shard-type' ) == 'sloth';
          },
          init: function () {
            //Sloth nid
            if (this.element.hasAttribute('data-id')) {
              this.setData('slothId', this.element.getAttribute('data-id'));
            }
            //View mode
            if (this.element.hasAttribute('data-view-mode')) {
              this.setData('viewMode', this.element.getAttribute('data-view-mode'));
            }
          }, //End init().
          /**
           * Called when initialing widget display in CK, and when
           * data is returned by the dialog.
           */
          data: function () {
            if (Drupal.SlothSpace.currentPreview) {
              this.element.setHtml(Drupal.SlothSpace.currentPreview);
            }
            this.element.setAttribute('data-id', this.data.slothId);
            this.element.setAttribute('data-view-mode', this.data.viewMode);
            this.element.setAttribute('class', 'shard-sloth');
          }
        });
        editor.ui.addButton('sloth', {
          label: 'Sloth',
          command: 'sloth'
        });
      }
    }
      ); //End then

    // }); //End init.
  // }); //End plugins.add
})(jQuery, Drupal);
